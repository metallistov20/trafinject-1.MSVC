# In-Makefile to generate 'trafinject' with XML-enhancements 
#
# 1. Ensure <cURL-devel> is installed on your system. If needed
# can be downloaded from: http://curl.haxx.se/download.html,
# but better is to use platform package mnager (dpkg, apr-get, etc).

# 2. Ensure <libxml2> is installed on your system. If needed
# can be downloaded from: http://www.xmlsoft.org/downloads.html
# (optionally: git clone git://git.gnome.org/libxml2). 
# Compile (autogen.sh) without 'Python' support, and
# install ('make install').
#
# 3. Provide flags -I<dir> and -L<dir> once installed
# into not default 'lib' and 'include' dirs of compiler.  
#
# (C) Copyright 2015, TP-Link Inc, konstantin.mauch@tp-link.com
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307 USA
export CC=@CC@

BUILD_CURL=@BUILD_CURL@

CFLAGS =  -c -g   -I/usr/local/include/libxml2


LDFLAGS = -L/usr/local/lib 


LIBS = -lcurl 	-lxml2


ifeq ($(strip $(prefix)),)
	PREFIX=""
else
	PREFIX="--prefix=$(prefix)"
endif

.PHONY: all install build deps clean uninstall


OBJS = inject.o lists.o xmls.o auxiliary.o  

all: build

install: build
	install $(PREFIX)

build:	compute_tabs gen_vocabulary gen_voHabulary voc.c voc.h voc.obj inject 


clean:
	rm -fv voc.c voc.h inject gen_vocabulary gen_voHabulary compute_tabs config.log config.status configure  *.in~ *.sh~ *.c~ *.h~ *.xml~ *.o *.log *.obj
	rm -rfv autom4te.cache 


gen_vocabulary: gen_vocabulary.c
	$(CC) gen_vocabulary.c -o gen_vocabulary

gen_voHabulary: gen_voHabulary.c
	$(CC) gen_voHabulary.c -o gen_voHabulary    

voc.c:	gen_vocabulary
	./gen_vocabulary >voc.c

voc.h:	gen_voHabulary
	./gen_voHabulary >voc.h

voc.obj: voc.c 
	$(CC) -o voc.obj -c voc.c  $(CFLAGS) $(LDFLAGS)

.o: .c
	$(CC) -o $@ -c $< $(CFLAGS) $(LDFLAGS)

inject: inject.o lists.o xmls.o auxiliary.o voc.obj 
	$(CC)  -o inject inject.o lists.o xmls.o auxiliary.o voc.obj $(LDFLAGS) $(LIBS)

compute_tabs: compute_tabs.c
	$(CC) compute_tabs.c -o compute_tabs


